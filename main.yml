---
- name: Configure Ubuntu
  hosts: localhost
  become: true
  connection: local
  vars_files:
    - 'vars/main.yml'
    - 'vars/secret.yml'

  tasks:
    - name: Update & Upgrade
      apt:
        update_cache: true
        upgrade: dist
        autoremove: true
        autoclean: true
      register: apt_action
      retries: 50
      until: apt_action is success or ('Failed to lock apt for exclusive operation' not in apt_action.msg and '/var/lib/dpkg/lock' not in apt_action.msg)

    - name: Get information about installed packages
      package_facts:
        manager: auto

    # - name: Install MySQL Repository Setup Package
    #   apt:
    #     deb: https://dev.mysql.com/get/mysql-apt-config_{{ mysql_repo_version }}.deb

    - name: Accept virtualbox-ext-pack select license
      shell: echo virtualbox-ext-pack virtualbox-ext-pack/license select true | debconf-set-selections
      when: "'virtualbox-ext-pack' not in ansible_facts.packages"

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /usr/share/keyrings/docker-archive-keyring.gpg
        state: present

    - name: Add Docker's repository
      copy:
        src: files/docker.list
        dest: /etc/apt/sources.list.d/docker.list
        mode: '0644'

    - name: Add VS Code GPG key
      ansible.builtin.get_url:
        url: https://packages.microsoft.com/keys/microsoft.asc
        dest: /usr/share/keyrings/packages.microsoft.gpg.old
        mode: "0644"
      notify:
        - Dearmor VS Code GPG key
      tags: vscode

    - name: Add VS Code's repository
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64,arm64,armhf signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main
        state: present
        filename: vscode
      tags: vscode

    - name: Add Wine GPG key
      apt_key:
        url: https://dl.winehq.org/wine-builds/winehq.key
        keyring: /usr/share/keyrings/winehq-archive.key
        state: present

    - name: Add Wine repository
      get_url:
        url: https://dl.winehq.org/wine-builds/ubuntu/dists/{{ ansible_distribution_release }}/winehq-{{ ansible_distribution_release }}.sources
        dest: /etc/apt/sources.list.d/winehq-{{ ansible_distribution_release }}.sources

    - name: Add Virtual Box key
      apt_key:
        url: https://www.virtualbox.org/download/oracle_vbox_2016.asc
        state: present
        keyring: /usr/share/keyrings/oracle_vbox_2016.gpg
    
    - name: Add Virtual Box repository
      apt_repository:
        repo: deb [arch=amd64 signed-by=/usr/share/keyrings/oracle_vbox_2016.gpg] https://download.virtualbox.org/virtualbox/debian {{ ansible_distribution_release }} contrib
        state: present
        filename: virtualbox

    # - name: Add Dropbox's GPG key
    #   apt_key:
    #     keyserver: pgp.mit.edu
    #     id: 1C61A2656FB57B7E4DE0F4C1FC918B335044912E
    #     keyring: /usr/share/keyrings/dropbox.gpg

    # - name: Add Dropbox repository
    #   apt_repository:
    #     repo: deb [signed-by=/usr/share/keyrings/dropbox.gpg] https://linux.dropbox.com/ubuntu {{ ansible_distribution_release }} main
    #     state: present
    #     filename: dropbox

    - name: Add Spotify's GPG key
      ansible.builtin.get_url:
        url: https://download.spotify.com/debian/pubkey_{{ spotify_pubkey }}.gpg
        dest: /usr/share/keyrings/spotify.gpg.old
        mode: "0644"
      notify:
        - Dearmor Spotify GPG key
      tags: spotify

    - name: Add Spotify repository
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/usr/share/keyrings/spotify.gpg] http://repository.spotify.com stable non-free
        state: present
        filename: spotify
      tags: spotify

    - name: Add git PPA's GPG key
      apt_key:
        keyserver: keyserver.ubuntu.com
        id: E1DD270288B4E6030699E45FA1715D88E1DF1F24
        keyring: /usr/share/keyrings/git.gpg
        state: present

    - name: Add git latest stable repository from PPA
      apt_repository:
        repo: deb [signed-by=/usr/share/keyrings/git.gpg] http://ppa.launchpad.net/git-core/ppa/ubuntu {{ ansible_distribution_release }} main
        filename: git

    - name: Install needed packages
      apt:
        name: "{{ pkg_list }}"
        state: present
        update_cache: true

    - name: Install docker compose
      get_url:
        url: https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Install Google Chrome
      apt:
        deb: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        state: present

    - name: Get Calibre installer
      get_url:
        url: https://download.calibre-ebook.com/linux-installer.sh
        dest: /opt/calibre-installer.sh
        mode: '0744'
      tags: calibre

    - name: Instal Calibre
      ansible.builtin.command: /opt/calibre-installer.sh
      tags: calibre

    - name: Create directory to Calibre DeDRM
      ansible.builtin.file:
        path: /opt/calibre_dedrm
        state: directory
      tags: calibre_dedrm

    - name: Get Calibre plugin DeDRM
      ansible.builtin.unarchive:
        src: https://github.com/noDRM/DeDRM_tools/releases/download/v{{ calibre_dedrm_version }}/DeDRM_tools_{{ calibre_dedrm_version }}.zip
        dest: /opt/calibre_dedrm
        remote_src: true
      tags: calibre_dedrm

    - name: Install Calibre plugin DeDRM
      ansible.builtin.command: calibre-customize --add /opt/calibre_dedrm/DeDRM_plugin.zip
      tags: calibre_dedrm

    - name: Install Calibre plugin DeDRM
      ansible.builtin.command: calibre-customize --add /opt/calibre_dedrm/Obok_plugin.zip
      tags: calibre_dedrm

    - name: Install WPS Office
      apt:
        deb: "{{ wps_office_deb }}"
        state: present

    - name: Install MySql Workbench
      community.general.snap:
        name: mysql-workbench-community
        classic: yes

    - name: Install python needed libs
      pip:
        name: "{{ python_libs }}"

    - name: Install VS Code extensions
      shell: code --install-extension {{ item }}
      with_items: "{{ vscode_extensions }}"
      become_user: "{{ username }}"

    - name: Add user to docker's group
      user:
        name: "{{ username }}"
        groups: docker
        append: yes

    - name: Configure new dconf profile for keyboard shortcut
      copy:
        src: files/dconf-profile-user
        dest: /etc/dconf/profile/user
        owner: root
        group: root
        mode: 0644
      notify: Update dconf

    - name: Create directory for custom keyboard shortcut
      file:
        path: /etc/dconf/db/local.d
        state: directory
      notify: Update dconf

    - name: Copy custom keyboard shortcut
      copy:
        src: files/01-local-keyboard-shortcut
        dest: /etc/dconf/db/local.d/01-local-keyboard-shortcut
      notify: Update dconf

    - name: Create /opt/script directory
      file:
        path: /opt/script
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: Copy script to update packages
      copy:
        src: files/update.sh
        dest: /opt/script/update.sh
        owner: root
        group: root
        mode: 0744

    - name: Copy script to check for manga update
      template:
        src: templates/manga.sh.j2
        dest: /opt/script/manga.sh
        owner: root
        group: root
        mode: 0777

    - name: Add config to bash.bashrc
      blockinfile:
        path: /etc/bash.bashrc
        block: |
          export PATH=/opt/script:$PATH
          DOCKER_HOST_IP=$(ip addr show docker0 | grep -Po 'inet \K[\d.]+')
          export WINEARCH=win32
          export WINEPREFIX=/home/{{ username }}/.wine
        state: present

    - name: Create folders to git
      file:
        path: /home/{{ username }}/{{ item }}
        state: directory
        mode: 0755
        owner: "{{ username  }}"
        group: "{{ username  }}"
      with_items:
        - gitlab
        - github

    - name: Clone manga repository
      git:
        repo: https://github.com/enssilva/scraping-manga.git
        dest: /home/{{ username }}/github/scraping-manga
      become_user: "{{ username }}"

    - name: Get Gecko
      get_url:
        url: http://dl.winehq.org/wine/wine-gecko/2.47.2/wine-gecko-2.47.2-x86.msi
        dest: /opt/
        mode: 0755

    - name: Create Wine prefix
      shell: WINEPREFIX=/home/{{ username }}/.wine WINEARCH=win32 wine wineboot
      become_user: "{{ username }}"

    - name: Install Gecko
      shell: WINEPREFIX=/home/{{ username }}/.wine WINEARCH=win32 wine msiexec /i /opt/wine-gecko-2.47.2-x86.msi
      become_user: "{{ username }}"

    - name: Install .NET 4.0 with winetricks
      shell: WINEARCH=win32 WINEPREFIX=/home/{{ username }}/.wine winetricks dotnet40 -q
      become_user: "{{ username }}"

    - name: Install mfc42 library with winetricks
      shell: WINEARCH=win32 WINEPREFIX=/home/{{ username }}/.wine winetricks mfc42 -q
      become_user: "{{ username }}"

    - name: Install Adobe Digital Edition with winetricks
      shell: WINEARCH=win32 WINEPREFIX=/home/{{ username }}/.wine winetricks adobe_diged4 -q
      become_user: "{{ username }}"

    - name: Copy Adobe Digital Edition icon
      copy:
        src: files/adobe-digital-edition.png
        dest: /usr/share/icons/

    - name: Copy Adobe Digital Edition startup file
      copy:
        src: files/adobe-digital-edition.desktop
        dest: /usr/share/applications/

    - name: Install kindle reader 1.16 certfile
      copy:
        src: files/kindle.cert
        dest: /etc/ssl/certs/b204d74a.0
        owner: root
        group: root
        mode: 0644

    - name: Install Kindler Reader with winetricks
      shell: WINEARCH=win32 WINEPREFIX=/home/{{ username }}/.wine winetricks kindle -q
      become_user: "{{ username }}"

    # - name: Install Windows Java JRE with wine
    #   shell: WINEARCH=win32 WINEPREFIX=/home/{{ username }}/.wine wine files/jre-8u311-windows-i586.exe /s
    #   become_user: "{{ username }}"
    #   ignore_errors: yes

    - name: Change registry to enable Java to work with wine
      lineinfile:
        path: /home/{{ username }}/.wine/system.reg
        line: "{{ item }}"
        insertbefore: '^"PATH"='
      with_items:
        - '"_JAVA_OPTIONS"="-Xmx512M"'
        - '"JAVA_HOME"=str(7):"C:\\Program Files\\Java\\jre1.8.0_311\0"'

    - name: Change registry to add Java to PATH
      lineinfile:
        path: /home/{{ username }}/.wine/system.reg
        regexp: '"PATH"=(.*)"\n'
        line: '"PATH"=\1;%JAVA_HOME%\\\\bin"'
        backrefs: yes

    # - name: Install Cisco Network Assistant with wine
    #   shell: WINEARCH=win32 WINEPREFIX=/home/{{ username }}/.wine wine files/cna-windows-k9-installer-6-3-4-en.exe /s
    #   become_user: "{{ username }}"

    - name: Configure cron
      ansible.builtin.cron:
        name: "check manga update"
        minute: "0"
        job: "XDG_RUNTIME_DIR=/run/user/$(id -u) /usr/bin/python3 /home/ebenezer/git/scraping-manga/scraping-manga.py 2>&1 | /usr/bin/logger -t MANGA"
    
    - name: ATENTION
      debug:
        msg: You need to run the script files/install-CNA.sh manually
  handlers:
    - name: Update dconf
      command: dconf update

    - name: Dearmor Spotify GPG key
      ansible.builtin.command: gpg --batch --yes --dearmor --output spotify.gpg spotify.gpg.old
      args:
        chdir: /usr/share/keyrings
      changed_when: true

    - name: Dearmor VS Code GPG key
      ansible.builtin.command: gpg --batch --yes --dearmor --output packages.microsoft.gpg packages.microsoft.gpg.old
      args:
        chdir: /usr/share/keyrings
      changed_when: true
